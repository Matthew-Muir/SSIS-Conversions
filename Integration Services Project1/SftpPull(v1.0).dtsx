<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/29/2021 4:28:47 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="TRAINING1"
  DTS:CreatorName="LCPUD\mattm"
  DTS:DTSID="{1C0ED55F-973C-40A1-9871-A2327C04D65A}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.167"
  DTS:LocaleID="1033"
  DTS:ObjectName="SftpPull Dev"
  DTS:PackageType="5"
  DTS:VersionBuild="38"
  DTS:VersionGUID="{A77039F2-BBC4-41F3-B9CE-F26008555295}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7216FCC4-A759-4BE7-8319-D2910B404ACD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarFileName">
      <DTS:VariableValue
        DTS:DataType="8">archive/*</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6204D109-AF96-44EF-A97B-EFAD30302E58}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarHostName">
      <DTS:VariableValue
        DTS:DataType="8">localhost</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1FE02FA1-9265-4432-B7DD-6ACCF7B334AD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarLocalPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\quick\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{02274236-ECDA-4B00-930D-32999D8F1375}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarPassword">
      <DTS:VariableValue
        DTS:DataType="8">password</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7952216A-FAE2-4E06-B302-43BD09A5F5F7}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerPath">
      <DTS:VariableValue
        DTS:DataType="8">/</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8E6D88F1-44EC-4FA0-8B98-4584448D66E0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarSsh">
      <DTS:VariableValue
        DTS:DataType="8">ssh-rsa 1024 ANhrKrpNVsxqr+JGrcQH6EUsz76ewdsazpcX1JE+XQc=</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{70A16266-6AB1-4F0E-AFA8-486DDB482163}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarUserName">
      <DTS:VariableValue
        DTS:DataType="8">admin</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task - Pull file from server"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{F50B39FD-6806-474B-BA84-8355DEB92A11}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task - Pull file from server"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_234340032f3e4420bfe701dd8e8cbcde"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::VarFileName,User::VarHostName,User::VarLocalPath,User::VarPassword,User::VarServerPath,User::VarSsh,User::VarUserName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_234340032f3e4420bfe701dd8e8cbcde.Properties.Settings.get_Default():ST_234340032f3e4420bfe701dd8e8cbcde.Properties.Sett" +
    "ings")]

namespace ST_234340032f3e4420bfe701dd8e8cbcde.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_234340032f3e4420bfe701dd8e8cbcde.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{9E393F36-5431-474A-B362-46490B0F86AB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_234340032f3e4420bfe701dd8e8cbcde</RootNamespace>
    <AssemblyName>ST_234340032f3e4420bfe701dd8e8cbcde</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <NuGetPackageImportStamp></NuGetPackageImportStamp>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.8.3.11552, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\mattm\Desktop\Work\XML_to_JSON_Proj\winscp\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.IO;
using System.Linq;
#endregion

namespace ST_234340032f3e4420bfe701dd8e8cbcde
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        static ScriptMain()
        {
            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
        }

        static System.Reflection.Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            //If dll can't be found. this will point it to a location that has it stored.
            if (args.Name.ToUpper().Contains("WINSCP"))
            {
                //Path to Dll file location.
                string path = @"P:\Shared Documents\Information Systems Shared Documents\JSON\dlls\";
                return System.Reflection.Assembly.LoadFile(System.IO.Path.Combine(path, "WinSCPnet.dll"));
            }
            return null;
        }

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
		{
            
            // TODO: Add your code here
            // Setup session options
            SessionOptions sessionOptions = new SessionOptions
            {
                Protocol = Protocol.Sftp,
                HostName = Dts.Variables["User::VarHostName"].Value.ToString(),
                UserName = Dts.Variables["User::VarUserName"].Value.ToString(),
                Password = Dts.Variables["User::VarPassword"].Value.ToString(),
                SshHostKeyFingerprint = Dts.Variables["User::VarSsh"].Value.ToString()
            };

            try
            {
                using (Session session = new Session())
                {
                    // Connect
                    session.Open(sessionOptions);

                    var localPath = Dts.Variables["User::VarLocalPath"].Value.ToString();
                    var serverPath = Dts.Variables["User::VarServerPath"].Value.ToString();
                    var fileName = Dts.Variables["User::VarFileName"].Value.ToString();

                    // Upload files
                    TransferOptions transferOptions = new TransferOptions();
                    transferOptions.TransferMode = TransferMode.Binary;

                    if (String.IsNullOrEmpty(fileName)) // folder sync
                    {
                        session.SynchronizeDirectories(SynchronizationMode.Local, localPath, serverPath, false, false, SynchronizationCriteria.Either, null);
                    }

                    else if (!fileName.Contains('.') && !fileName.Contains('*') && !fileName.Contains('?')) // folder transfer
                    {
                        session.GetFiles(serverPath + fileName, localPath, false);
                    }

                    else if (fileName.Contains('*') || fileName.Contains('?')) //wildcard transfer
                    {
                        session.GetFilesToDirectory(serverPath, localPath, fileName, false);
                    }

                    else //Single file transfer
                    {
                        if (session.FileExists(localPath + fileName)) //check if file exists on server
                        {
                            if (!session.GetFileInfo(serverPath + fileName).LastWriteTime.Equals(File.GetLastWriteTime(localPath + fileName))) // check if files are different versions. If they're then delete server copy before transfer.
                            {
                                File.Delete(localPath + fileName);
                                session.GetFileToDirectory(serverPath + fileName, localPath);
                            }
                            //If file exists in local directory and versions are the same. No need to do anything
                        }
                        else //file doesn't exists on server. So put it there.
                        {
                            session.GetFileToDirectory(serverPath + fileName, localPath);
                        }
                    }
                    session.Close();
                }
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
            

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_234340032f3e4420bfe701dd8e8cbcde</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_234340032f3e4420bfe701dd8e8cbcde</msb:DisplayName>
    <msb:ProjectId>{496A0226-8639-4FCD-9AC4-E557D426355A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_234340032f3e4420bfe701dd8e8cbcde.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_234340032f3e4420bfe701dd8e8cbcde")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_234340032f3e4420bfe701dd8e8cbcde")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_234340032f3e4420bfe701dd8e8cbcde.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_234340032f3e4420bfe701dd8e8cbcde.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_234340032f3e4420bfe701dd8e8cbcde.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_234340032f3e4420bfe701dd8e8cbcde.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_234340032f3e4420bfe701dd8e8cbcde.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_234340032f3e4420bfe701dd8e8cbcde.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDABNt6GAAAAAAAAAAAOAAIiALATAAABgAAAAIAAAAAAAAQjcA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPA2AABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAASBcAAAAgAAAAGAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAaAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAIAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAk
NwAAAAAAAEgAAAACAAUAcCMAAMgSAAABAAAAAAAAADg2AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4oEAAAChT+BgIAAAZzEQAACm8SAAAKKroDbxMAAApvFAAA
CnIBAABwbxUAAAosFXIPAABwcpgAAHAoFgAACigXAAAKKhQqABswCAAvAgAAAQAAEXMYAAAKJRZv
GQAACiUCKBoAAApvGwAACnK0AABwbxwAAApvHQAACm8eAAAKbx8AAAolAigaAAAKbxsAAApy2AAA
cG8cAAAKbx0AAApvHgAACm8gAAAKJQIoGgAACm8bAAAKcvwAAHBvHAAACm8dAAAKbx4AAApvIQAA
CiUCKBoAAApvGwAACnIgAQBwbxwAAApvHQAACm8eAAAKbyIAAAoKcyMAAAoLBwZvJAAACgIoGgAA
Cm8bAAAKcjoBAHBvHAAACm8dAAAKbx4AAAoMAigaAAAKbxsAAApyYAEAcG8cAAAKbx0AAApvHgAA
Cg0CKBoAAApvGwAACnKIAQBwbxwAAApvHQAACm8eAAAKEwRzJQAAChZvJgAAChEEKCcAAAosEwcW
CAkWFhkUbygAAAomOMsAAAARBB8uKAEAACstLREEHyooAQAAKy0iEQQfPygBAAArLRcHCREEKCoA
AAoIFhRvKwAACiY4kwAAABEEHyooAQAAKy0LEQQfPygBAAArLA8HCQgRBBYUbywAAAomK24HCBEE
KCoAAApvLQAACixMBwkRBCgqAAAKby4AAApvLwAAChMFEgUIEQQoKgAACigwAAAKKDEAAAotMwgR
BCgqAAAKKDIAAAoHCREEKCoAAAoIFhRvMwAACiYrEgcJEQQoKgAACggWFG8zAAAKJgdvNAAACt4K
BywGB281AAAK3N4Nbx4AAAooNgAACibeAAIoGgAAChZvNwAACioAQTQAAAIAAACnAAAAYgEAAAkC
AAAKAAAAAAAAAAAAAAChAAAAdAEAABUCAAANAAAAFQAAAR4CKDgAAAoqHgIoOQAACiqufgEAAAQt
HnKsAQBw0AMAAAIoOgAACm87AAAKczwAAAqAAQAABH4BAAAEKhp+AgAABCoeAoACAAAEKhp+AwAA
BCoeAig9AAAKKi5zCgAABoADAAAEKgAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBs
AAAAhAUAACN+AADwBQAAfAgAACNTdHJpbmdzAAAAAGwOAAAgAgAAI1VTAIwQAAAQAAAAI0dVSUQA
AACcEAAALAIAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQsAAAD6ATMAFgAAAQAAADUAAAAFAAAABgAA
AAsAAAADAAAAPQAAAAIAAAAQAAAAAQAAAAIAAAADAAAABAAAAAEAAAAHAAAAAQAAAAEAAAABAAAA
AADIBAEAAAAAAAYAQQMiBgYA0AMiBgYAjQIPBg8AlgYAAAYAugJ8BQYAJAN8BQYABQN8BQYAtwN8
BQYAYQN8BQYAegN8BQYA0QJ8BQYA7AIwBAoAlQN3BAoA9wF3BAYAPAh8BQYApwcGBQYACwcGBQ4A
WAciAA4ASgUiAAYAYgEGBQYAjgUGBQYADQUGBQYAcAIPBgYA1gVCBgYAswVnBRIAOQKyBBIAoQKy
BBIAEwJSBQYAVQIiBgYALgUGBQYA5gUGBQYATAQGBQYAUwQYAA4A9AQiAAoAoAR3BBYA7waOARYA
8gCOAQ4AZwciAA4A5QAiAA4A+AciAA4AzQAiAA4AUAAiABoA+wC/BQYAAQBxAA4A4AciAA4AmAUi
AAYAOgEYAA4AHAciAAYABgEGBR4ALQg6Bx4AxAc6BwYAtgEGBQYAEgEGBQAAAAAPAAAAAAABAAEA
AQAAACMFqQA5AAEAAQAAABAASQa8BkEAAQAFAAABEAACB7wGcQADAAkAAwEAAIcHAABZAAQADAAR
ABIFJQERAOcBKQERAJkALQEGBkgAMQFWgHcHNAFWgMcBNAFQIAAAAACRGAgGOAEBAGggAAAAAJEA
EgQ8AQEAmCAAAAAAhgApBQYAAwAIIwAAAACGGAIGBgADABAjAAAAAIMYAgYGAAMAGCMAAAAAkwjS
BUQBAwBEIwAAAACTCM8BSQEDAEsjAAAAAJMI2wFOAQMAUyMAAAAAlgi4B1QBBABaIwAAAACGGAIG
BgAEAGIjAAAAAJEYCAY4AQQAAAABAMsFAAACAC4HAAABAPgDCQACBgEAEQACBgYAGQACBgoAKQAC
BhAAMQACBhAAOQACBhAAQQACBhAASQACBhAAUQACBhAAWQACBhAAYQACBhAAaQACBgYAuQACBgYA
2QACBhUA6QACBgYA8QA4BRsA+QACBiAA8QD+AyYAiQA/ASwAAQH6BSwAAQFPBzAACQGuATUAeQA2
ATsAkQACBgYAkQDwBE0AcQB/B1QAGQHrBloAIQH9BGAAKQHuA2cAgQBKBCwAkQBVARAAkQBIARAA
kQCMABAAkQAOCBAAmQACBgYAmQAeBWsAMQECBgYAMQHhAHEAAQFsCHgAmQClBn0AWQFPB5AAAQGg
BzUAmQD5BqIAmQBYCK4AmQCVBzAAmQCnBbsAcQFrAcIAeQF9AccAoQAzB80AeQFOAtMAmQBFCNgA
mQArAgYAiQExAgYAkQEoCOQAGQHRBwEAcQACBgYAgQACBgYAoQEkAesAoQE4CPQAwQACBvkA4QAC
BgYACAAUABsBCAAYACABKQBzAJABLgALAGgBLgATAHEBLgAbAJABLgAjAJkBLgArAMIBLgAzAMIB
LgA7AMIBLgBDAJkBLgBLAMgBLgBTAMIBLgBbAN8BQwBjACABSQBzAJABYQB7ACABYwBrACABQQAD
AAEABAADAAAA1gVZAQAA7wFeAQAAvAdjAQIABgADAAIABwAFAAEACAAFAAIACQAHAASAAAABAAAA
tB6RPAAAAAAAAKkAAAAEAAAAAAAAAAAAAAAAAWgAAAAAAA8AAAAAAAAAAAAAAAkBWAQAAAAAAQAI
AAMAIC0AAAAAEgGuBwAAAAAEAAAAAAAAAAAAAAAAAQYFAAAAAA8AAAAAAAAAAAAAAAkBKQAAAAAA
BAAAAAAAAAAAAAAAAAG7AQAAAAAEAAAAAAAAAAAAAAAAAToHAAAAAAAAAAABAAAAUwYAAAUAAgBT
AJ4AAAAASUVudW1lcmFibGVgMQA8TW9kdWxlPgBTeXN0ZW0uSU8AV2luU0NQAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5bmNocm9uaXphdGlvbkNyaXRlcmlhAG1zY29y
bGliAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAHNldF9QYXNzd29yZABkZWZhdWx0SW5zdGFu
Y2UAU1RfMjM0MzQwMDMyZjNlNDQyMGJmZTcwMWRkOGU4Y2JjZGUAU3luY2hyb25pemF0aW9uTW9k
ZQBzZXRfVHJhbnNmZXJNb2RlAFZhcmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGlt
ZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATG9hZEZpbGUAZ2V0X05hbWUAc2V0X1VzZXJO
YW1lAHNldF9Ib3N0TmFtZQBEYXRlVGltZQBnZXRfTGFzdFdyaXRlVGltZQBHZXRMYXN0V3JpdGVU
aW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAQ29tYmluZQBUeXBlAFN5c3RlbS5D
b3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFS
VFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNw
b3NlAEVkaXRvckJyb3dzYWJsZVN0YXRlAERlbGV0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0
ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1h
cmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVl
AGFkZF9Bc3NlbWJseVJlc29sdmUAQ3VycmVudERvbWFpbl9Bc3NlbWJseVJlc29sdmUAU3lzdGVt
LlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBQYXRoAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2Ny
aXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9i
amVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF8yMzQzNDAwMzJmM2U0NDIwYmZlNzAx
ZGQ4ZThjYmNkZS5kbGwAc2V0X1Byb3RvY29sAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNl
TWFuAE9wZW4AU2NyaXB0TWFpbgBBcHBEb21haW4AZ2V0X0N1cnJlbnREb21haW4AU2Vzc2lvbgBT
eXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlv
bgBFeGNlcHRpb24AUmVtb3RlRmlsZUluZm8AR2V0RmlsZUluZm8AQ3VsdHVyZUluZm8AU3lzdGVt
LkxpbnEAc2VuZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAUmVzb2x2ZUV2ZW50SGFuZGxlcgBUb1Vw
cGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzIzNDM0MDAzMmYzZTQ0MjBiZmU3MDFkZDhl
OGNiY2RlLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTeW5j
aHJvbml6ZURpcmVjdG9yaWVzAFNUXzIzNDM0MDAzMmYzZTQ0MjBiZmU3MDFkZDhlOGNiY2RlLlBy
b3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBHZXRGaWxlcwBTZXR0aW5ncwBSZXNvbHZlRXZlbnRBcmdz
AFRyYW5zZmVyRXZlbnRBcmdzAGFyZ3MARXF1YWxzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAENvbnRh
aW5zAFNlc3Npb25PcHRpb25zAFRyYW5zZmVyT3B0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0
UmVzdWx0cwBGaWxlRXhpc3RzAENvbmNhdABPYmplY3QAV2luU0NQbmV0AGdldF9EZWZhdWx0AERp
YWxvZ1Jlc3VsdABzZXRfVGFza1Jlc3VsdABUcmFuc2Zlck9wZXJhdGlvblJlc3VsdABTeW5jaHJv
bml6YXRpb25SZXN1bHQAc2V0X1NzaEhvc3RLZXlGaW5nZXJwcmludABTaG93AE1lc3NhZ2VCb3gA
Z2V0X0Fzc2VtYmx5AEdldEZpbGVUb0RpcmVjdG9yeQBHZXRGaWxlc1RvRGlyZWN0b3J5AElzTnVs
bE9yRW1wdHkAAAAADVcASQBOAFMAQwBQAACAh1AAOgBcAFMAaABhAHIAZQBkACAARABvAGMAdQBt
AGUAbgB0AHMAXABJAG4AZgBvAHIAbQBhAHQAaQBvAG4AIABTAHkAcwB0AGUAbQBzACAAUwBoAGEA
cgBlAGQAIABEAG8AYwB1AG0AZQBuAHQAcwBcAEoAUwBPAE4AXABkAGwAbABzAFwAABtXAGkAbgBT
AEMAUABuAGUAdAAuAGQAbABsAAAjVQBzAGUAcgA6ADoAVgBhAHIASABvAHMAdABOAGEAbQBlAAAj
VQBzAGUAcgA6ADoAVgBhAHIAVQBzAGUAcgBOAGEAbQBlAAAjVQBzAGUAcgA6ADoAVgBhAHIAUABh
AHMAcwB3AG8AcgBkAAAZVQBzAGUAcgA6ADoAVgBhAHIAUwBzAGgAACVVAHMAZQByADoAOgBWAGEA
cgBMAG8AYwBhAGwAUABhAHQAaAAAJ1UAcwBlAHIAOgA6AFYAYQByAFMAZQByAHYAZQByAFAAYQB0
AGgAACNVAHMAZQByADoAOgBWAGEAcgBGAGkAbABlAE4AYQBtAGUAAHFTAFQAXwAyADMANAAzADQA
MAAwADMAMgBmADMAZQA0ADQAMgAwAGIAZgBlADcAMAAxAGQAZAA4AGUAOABjAGIAYwBkAGUALgBQ
AHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAtdm+WEWvdEOJe9bXNOT4
3wAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERaQQAABJ5BSACARwYBSABARJ9AyAADgQgAQIOBQAC
Dg4OBQABEj0OCwcGEkkSTQ4ODhFRBiABARGAiQUgABKAjQUgABKAkQYgARKAlRwDIAAcBSABARJJ
BiABARGAnQQAAQIOEiAHEoChEYClDg4CAhGAqRKAmQ0QAQICFRKAsQEeAB4AAwoBAwsgBBKAtQ4O
AhKAmQwgBRKAtQ4ODgISgJkGIAESgLkOBCAAEVEFAAERUQ4FIAECEVEEAAEBDgsgBBKAwQ4OAhKA
mQYAARGAzQ4IAAESgNERgNUEIAASPQYgAgEOEj0It3pcVhk04IkIiYRdzYCAzJEIInHsSjxW0L8E
AAAAAAQBAAAAAwYSYQMGEmUDBhIQAgYIAwYRFAMAAAEHAAISPRwSRQQAABJhBAAAEmUFAAEBEmUE
AAASEAQIABJhBAgAEmUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93
cwEIAQACAAAAAAAoAQAjU1RfMjM0MzQwMDMyZjNlNDQyMGJmZTcwMWRkOGU4Y2JjZGUAAAUBAAAA
ABYBABFDb3B5cmlnaHQgQCAgMjAyMQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBU
DhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAAAC0AAAAzsrvvgEAAACR
AAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQu
MC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNT
eXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAA
GDcAAAAAAAAAAAAAMjcAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQ3AAAAAAAAAAAAAAAAX0Nv
ckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAJE8tB4AAAEAkTy0Hj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAA
UwBUAF8AMgAzADQAMwA0ADAAMAAzADIAZgAzAGUANAA0ADIAMABiAGYAZQA3ADAAMQBkAGQAOABl
ADgAYwBiAGMAZABlAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcA
OAA2ADAALgAxADUANQAwADUAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBU
AF8AMgAzADQAMwA0ADAAMAAzADIAZgAzAGUANAA0ADIAMABiAGYAZQA3ADAAMQBkAGQAOABlADgA
YwBiAGMAZABlAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABD
AG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADEAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEA
ZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBt
AGUAAABTAFQAXwAyADMANAAzADQAMAAwADMAMgBmADMAZQA0ADQAMgAwAGIAZgBlADcAMAAxAGQA
ZAA4AGUAOABjAGIAYwBkAGUALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAA
AAAAUwBUAF8AMgAzADQAMwA0ADAAMAAzADIAZgAzAGUANAA0ADIAMABiAGYAZQA3ADAAMQBkAGQA
OABlADgAYwBiAGMAZABlAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA3ADgANgAwAC4AMQA1ADUAMAA1AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA3ADgANgAwAC4AMQA1ADUAMAA1AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAEQ3AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="237,42"
          Id="Package\Script Task - Pull file from server"
          TopLeft="720,357" />
        <AnnotationLayout
          Text="SFTP Pull from server to local directory via WinSCP dll"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="406,45"
          Id="c7efcf4a-176b-49ec-b90d-26c4430636bd"
          TopLeft="612,268" />
        <AnnotationLayout
          Text="To use this package. Set the defined variables values.&#xA;This package also extends functionality via the value of VarFileName.&#xD;&#xA;&#xA;NOTE: a file name must also include it's extension&#xA;~ Leave the field blank to sync your remote local directory with remote.&#xA;~ Wildcard characters ('?' '*') will match 0 to many files and transfer all matches e.g. *.txt , myFi??.pdf&#xA;~ An exact file name including extension will transfer only that file.&#xD;&#xA;~ A folder name will transfer a folder and it's contents e.g. myFolder&#xD;&#xA;~ A folder name with '/*' at the end will return only the folders contents. eg myFolder/*"
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="735,216"
          Id="f28c01a4-40b5-4ba7-982d-8bccf106aa71"
          TopLeft="527,437" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>